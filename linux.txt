*Linux is a free, open-source operating system that's known for its reliability, security, and flexibility. It's used in many devices and enterprise solutions, and has a large community for support and development. Linux is made up of a kernel that manages hardware resources, multitasking, and more. It also has a command-line environment that users can use to operate and configure the system. 

*The Linux kernel manages hardware resources, multitasking, and other aspects of computing devices. Understanding how the kernel works can help you understand the need for operating systems.
*Open source
Anyone can access and modify Linux, allowing users and developers to customize it to their needs.
*Shell
A shell is an interpreter that understands user commands and passes them on to the computer for processing. Shells also allow users to run a set of commands and user settings from a file called a shell script.
*Command line
Linux's command-line environment is a powerful way to operate and configure the system. Knowing a variety of commands is important for effective system administration and day-to-day operations. 
1.structure:-
The Linux architecture is highly modular and configurable, offering a high degree of customization and flexibility to users and developers. It is a layered structure comprising several components, including the kernel, system libraries, system calls, shell, applications, graphical user interface, and device drivers.

2.file syatem:-Linux file system is generally a built-in layer of a Linux operating system used to handle the data management of the storage. It helps to arrange the file on the disk storage. It manages the file name, file size, creation date, and much more information about a file.

basic linux commands and utilites:-
A:-  https://users.soict.hust.edu.vn/linhtd/courses/CompLit_EN/part01-linux/02-FileSystem.pdf (for commands )
     *https://www.geeksforgeeks.org/introduction-to-linux-operating-system/ (importantsite )
B:-A utility of the Linux OS is the Linux Command. All primary and advanced tasks can be done by executing commands. The commands are performed on the Linux terminal. The terminal is a command line similar to the command prompt in Windows OS. Commands in Linux are case-sensitive.

What is Linux Operating System?
==>The Linux Operating System is a type of operating system that is similar to Unix, and it is built upon the Linux Kernel. The Linux Kernel is like the brain of the operating system because it manages how the computer interacts with its hardware and resources. It makes sure everything works smoothly and efficiently. But the Linux Kernel alone is not enough to make a complete operating system. To create a full and functional system, the Linux Kernel is combined with a collection of software packages and utilities, which are together called Linux distributions. These distributions make the Linux Operating System ready for users to run their applications and perform tasks on their computers securely and effectively. Linux distributions come in different flavors, each tailored to suit the specific needs and preferences of users.

==>Linux File Hierarchy Structure

The Linux File Hierarchy Structure or the Filesystem Hierarchy Standard (FHS) defines the directory structure and directory contents in Unix-like operating systems. It is maintained by the Linux Foundation. 

In the FHS, all files and directories appear under the root directory /, even if they are stored on different physical or virtual devices.
Some of these directories only exist on a particular system if certain subsystems, such as the X Window System, are installed.
Most of these directories exist in all UNIX operating systems and are generally used in much the same way; however, the descriptions here are those used specifically for the FHS and are not considered authoritative for platforms other than Linux. 

basic linux file system :-
/bin ==> basic programs (ls,cd, mv etc )
/sbin ==>>system programs (sysctl,mkfs etc )
/etc ==>> configration files 
/tem ==>> temprory files
/user/bin ==>> applications (apt, nmap, etc )
/user/share ==>> application support and data files 
/home ==>> personal directories of users 
/root ==>> home directory of super user (admin)

commanly used commands in linux :--
*mkdir 
 pwd 
 ls
 help
 man - manual 
 cat - read file or folder 
 sudo su - root user
 gedit- file editor software 
 chmod- change directory permission 
nano - linux file editior 
 dir - works same as ls
 mv -move a file or folder 
 cp - copy a file or folder
 rm- remove (delete) file or folder
 ./- executes file 
 bash - execute shell programme 
 apt get update 
 apt get upgrade 
 apt get install (file name)
 top -showing linux process 
 kill - terminate processes manually
 w -who is logged on and what are they doing 
 whoami - display the current user 
 touch - create empty files 
 

  what is navigation in linux ?

  Before learning how to navigate the filesystem, it's good to know how Linux organizes data. Navigation is based on the concept of paths. These paths specify what directories to traverse to reach a particular subdirectory or file. The path basically says: go here, go here, go here, and you'll find this.

There are two types of paths: Absolute paths and relative paths. 
 absolute path :- An absolute path is a complete path to a resource, This path defines the directory listing from the top of the filesystem. It's best used in scripts, directory mounting commands, and when you might be confused about exactly how to get to a given destination. filesystem root is denoted by single slash /

relative path :- For example, if you're already in your home directory (for me, that's /home/damon), and you want to find an OGG file in the Rock subdirectory of the Music directory, then you don't have to specify /home/damon—that's already traversed. You just need to specify the rest of the path relative to where you are now. So, the relative path in that situation would be Music/Rock.

8 basic commands to navigate your linux filesystem 
 find your location :- pwd ,tree
go to some other directory :- cd 
take a shortcut :- Single dot, or .
Double dot, or ..
Tilde, or ~

Linux file permissions explained
Understanding Linux file permissions (how to find them, read them, and change them) is an important part of maintaining and securing your systems.


File permissions are core to the security model used by Linux systems. They determine who can access files and directories on a system and how. This article provides an overview of Linux file permissions, how they work, and how to change them.
   

How do you view Linux file permissions?
The ls command along with its -l (for long listing) option will show you metadata about your Linux files, including the permissions set on the file.

$ ls -l
vimrc  sets of permissions:


drwxr-xr-x. 4 root root   
-rw-r--r--. 1 root root  
In this example, you see two different listings. The first field of the ls -l output is a group of metadata that includes the permissions on each file. Here are the components of the vimrc listing:

File type: -
Permission settings: rw-r--r--
Extended attributes: dot (.)
User owner: root
Group owner: root
The fields "File type" and "Extended attributes" are outside the scope of this article, but in the featured output above, the vimrc file is a normal file, which is file type - (that is, no special type).

The tuned listing is for a d, or directory, type file. There are other file types as well, but these two are the most common. Available attributes are dependent on the filesystem format that the files are stored on. For Red Hat Enterprise Linux 7, 8, and 9, the default filesystem format is XFS.


This article is about the permission settings on a file. The interesting permissions from the vimrc listing are:

rw-r--r–
This string is actually an expression of three different sets of permission 

rw-
r--
r--
The first set of permissions applies to the owner of the file. The second set of permissions applies to the user group that owns the file. The third set of permissions is generally referred to as "others." All Linux files belong to an owner and a group.

When permissions and users are represented by letters, that is called symbolic mode. For users, u stands for user owner, g for group owner, and o for others. For permissions, r stands for read, w for write, and x for execute.


When the system is looking at a file's permissions to determine what information to provide you when you interact with a file, it runs through a series of checks:

It first checks to see whether you are the user that owns the file. If so, then you are granted the user owner's permissions, and no further checks will be completed.
If you are not the user that owns the file, next your group membership is validated to see whether you belong to the group that matches the group owner of the file. If so, then you're covered under the group owner field of permissions, and no further checks will be made.
"Others" permissions are applied when the account interacting with the file is neither the user owner nor in the group that owns the files. Or, to put it another way, the three fields are mutually exclusive: You can not be covered under more than one of the fields of permission settings on a file.
Permissions go beyond the different types of people that can interact with a file. Each user gets an expression that includes the three basic types of permissions. In the example above, the owner of the file is given the following permissions:

rw-
Each character in the expression indicates whether a specific permission is granted or not. In the example above, read (r) permission and write (w) permission have been granted on the file. However, the execute permission (x) is not granted, which is why there's a - sign in the expression. The permission in this field is disabled.

Consider the group owner's permissions in this example:

r--
The read (r) permission is granted to members of the group, but write and execute have both been disabled. 

What are octal values?

When Linux file permissions are represented by numbers, it's called numeric mode. In numeric mode, a three-digit value represents specific file permissions (for example, 744.) These are called octal values. The first digit is for owner permissions, the second digit is for group permissions, and the third is for other users. Each permission has a numeric value assigned to it:

r (read): 4
w (write): 2
x (execute): 1
In the permission value 744, the first digit corresponds to the user, the second digit to the group, and the third digit to others. By adding up the value of each user classification, you can find the file permissions.

For example, a file might have read, write, and execute permissions for its owner, and only read permission for all other users. That looks like this:

Owner: rwx = 4+2+1 = 7
Group: r-- = 4+0+0 = 4
Others: r-- = 4+0+0 = 4
The results produce the three-digit value 744.


How do directory permissions work?
Directory file types are indicated with d. Conceptually, permissions operate the same way, but directories interpret these operations differently.

Read (r)
Like regular files, this permission allows you to read the contents of the directory. However, that means that you can view the contents (or files) stored within the directory. This permission is required to have things like the ls command work.

Write (w)
As with regular files, this allows someone to modify the contents of the directory. When you are changing the contents of the directory, you are either adding files to the directory or removing files from the directory. As such, you must have write permission on a directory to move (mv) or remove (rm) files from it. You also need write permission to create new files (using touch or a file-redirect operator) or copy (cp) files into the directory.

Execute (x)
This permission is very different on directories compared to files. Essentially, you can think of it as providing access to the directory. Having execute permission on a directory authorizes you to look at extended information on files in the directory (using ls -l, for instance) but also allows you to change your working directory (using cd) or pass through this directory on your way to a subdirectory underneath.

Lacking execute permission on a directory can limit the other permissions in interesting ways. For example, how can you add a new file to a directory (by leveraging the write permission) if you can't access the directory's metadata to store the information for a new, additional file? You cannot. It is for this reason that directory-type files generally offer execute permission to one or more of the user owner, group owner, or others.


How do you modify Linux file permissions?
You can modify file and directory permissions with the chmod command, which stands for "change mode." To change file permissions in numeric mode, you enter chmod and the octal value you desire, such as 744, alongside the file name. To change file permissions in symbolic mode, you enter a user class and the permissions you want to grant them next to the file name. For example:

$ chmod ug+rwx example.txt
$ chmod o+r example2.txt
This grants read, write, and execute for the user and group, and only read for others. In symbolic mode, chmod u represents permissions for the user owner, chmod g represents other users in the file's group, chmod o represents other users not in the file's group. For all users, use chmod a.

Maybe you want to change the user owner itself. You can do that with the chown command. Similarly, the chgrp command can be used to change the group ownership of a file.


What are special file permissions?
Special permissions are available for files and directories and provide additional privileges over the standard permission sets that have been covered.

SUID is the special permission for the user access level and always executes as the user who owns the file, no matter who is passing the command.
SGID allows a file to be executed as the group owner of the file; a file created in the directory has its group ownership set to the directory owner. This is helpful for directories used collaboratively among different members of a group because all members can access and execute new files.
The "sticky bit" is a directory-level special permission that restricts file deletion, meaning only the file owner can remove a file within the directory.

Want to take a deeper dive into special permissions? Read Linux permissions: SUID, SGID, and sticky bit.

Wrapping up
Understanding Linux file permissions (how to find them, read them, and change them) is an important part of maintaining and securing your systems.


